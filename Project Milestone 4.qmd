---
title: "Project Milestone 4"
author: "Group 1"
format: html
editor: visual
---

## Group 1- Project Milestone #4

#### **For Scenario 1: Infectious disease outbreak (simulated) in California**

```{r, include = F}
library (dplyr) 
library (tidyverse) 
library (tidyr)
library (snakecase) 
install.packages ("MMWRweek")
library(MMWRweek)# Create MMWR week strings 
library (kableExtra)
library (ggplot2)
```

## Data Dictionary

```{r, echo = FALSE}
#Create Data Dictionary with Variable Name, Data Type, Description 
Dictionary <- data.frame(   
  Variable_Name = c("county", "race_eth", "total_infections", "total_unrecovered", "total_severe", "pop"),   
        Data_Type = c("Character", "Character", "Integer", "Integer", "Integer", "Integer"),   
      Description = c(     "California county of residence of novel infectious respiratory ID cases",     "Race-Ethnicity categorization as defined by California Department of Finance",     "Cumulative number of diagnosed individuals from May 28th-Dec 30th, 2023, per race category",     "Cumulative number of individuals reported as unrecovered after a week of being diagnosed from May 28th-Dec 30th, 2023, per race category",     "Cumulative number of identified individuals having severe disease requiring hospitalization from May 28th-Dec 30th, 2023, per race category",     "Population of each California county, per race category"   ) )

#Create a table using KableExtra 
Dictionary %>%   
  kable("html", col.names = c("Variable Name", "Data Type", "Description")) %>%   
  kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed", "responsive"))  %>%   add_header_above(c("Data Dictionary" = 3))
```

## Import Datasets

```{r import_data, include = FALSE}
#import DataSet#1 from GitHub (sim_novelid_CA.csv)
CA_data <- read.csv("https://raw.githubusercontent.com/PHW290/phw251_projectdata/refs/heads/main/scenario_1/sim_novelid_CA.csv") %>%  
  rename_with(~ tolower(gsub(" ","_",.x,fixed=TRUE)))  

#Dataset two (sim_novelid_LACounty.csv)
LACounty_data <- read.csv("https://raw.githubusercontent.com/PHW290/phw251_projectdata/refs/heads/main/scenario_1/sim_novelid_LACounty.csv") %>%   
  rename_with(~ tolower(gsub(" ","_",.x,fixed=TRUE))) 

#Import Dataset three (population dataset)
DS3 <- read.csv("https://raw.githubusercontent.com/PHW290/phw251_projectdata/refs/heads/main/scenario_1/ca_pop_2023.csv") %>%   rename_with(~ tolower(gsub(" ","_",.x,fixed=TRUE)))
```

## Morbidity Datasets

### 1) Recode Column Names

```{r renameCA_data, include = FALSE}
#Rename columns to new column names, add date column in date format 
CA_data_clean <-  CA_data %>%   
  rename (race_eth = race_ethnicity) %>%   
  rename (infections_new = new_infections) %>%  
  rename (infected_cum = cumulative_infected) %>%   
  rename (unrecovered_new = new_unrecovered)%>%   
  rename (unrecovered_cum = cumulative_unrecovered) %>%  
  rename (severe_new = new_severe) %>%   
  rename (severe_cum = cumulative_severe) %>%   
  mutate(     year = as.numeric(substr(time_int, 1, 4)),  # Extract the year   
mmwr_week = as.numeric(substr(time_int, 5, 6)),  # Extract the week    
date = MMWRweek2Date(MMWRyear = year, MMWRweek = mmwr_week)  # Convert to date  
) %>%   
  select (-dt_diagnosis, -year, -mmwr_week, -time_int)  #Remove word "county" in the county column

CA_data_clean <- CA_data_clean %>%   mutate(county = gsub("\\County\\b", "", county)) 

#Recode race_eth column to convert numbers to descriptions same as LACounty data 
CA_data_clean <- CA_data_clean %>%   
  mutate(     race_eth = recode(race_eth, `1` = "White, Non-Hispanic",`2` = "Black, Non-Hispanic", `3` = "American Indian or Alaska Native, Non-Hispanic",`4` = "Asian, Non-Hispanic",`5` = "Native Hawaiian or Pacific Islander, Non-Hispanic",`6` = "Multiracial (two or more of above races), Non-Hispanic",`7` = "Hispanic (any race)",       `9` = "Unknown")   
              ) 

#head(CA_data_clean)
str(CA_data_clean) 
#unique(CA_data_clean$race_eth)}
```

```{r cleanLA_data, include = FALSE}
#LA Dataset cleaned  
LA_data_clean <- LACounty_data %>%   
  mutate(county = "Los Angeles") %>%  
  rename(age_cat = age_category, date =  dt_dx, infections_new = dx_new, infected_cum = infected_cumulative,          unrecovered_cum = unrecovered_cumulative,severe_cum = severe_cumulative) %>%  
  mutate(date = as.Date(date, format = "%d%b%Y")) %>%   
  select(county, age_cat, sex, race_eth, infections_new, infected_cum,unrecovered_new, unrecovered_cum, severe_new, severe_cum, date)  

#head(LA_data_clean) 
str(LA_data_clean)
```

### 2) Join Morbidity Datasets & Aggregate by Race

```{r join_morbidity, include = FALSE, warning= FALSE, message = FALSE}
#Join CA_data_clean with LA_data_clean 
Counties_join <- full_join (CA_data_clean, LA_data_clean) %>%   
  arrange (county) 

#Aggregate by Race/Ethnicity 
Counties_race <- Counties_join %>%   
  group_by(county, race_eth) %>%   
  summarize (total_infections = sum(infections_new),total_unrecovered = sum (unrecovered_new),              total_severe = sum (severe_new)) %>%   
  ungroup()  

head(Counties_race)
```

## Population Dataset

### 1) Rename racial ethnic groups

```{r cleanpop_data, include = FALSE}
DS3 <- DS3 %>% mutate(race7 = recode(race7, `WhiteTE NH` = "White, Non-Hispanic", `Black NH` = "Black, Non-Hispanic", `AIAN NH` = "American Indian or Alaska Native, Non-Hispanic", `Asian NH` = "Asian, Non-Hispanic", `NHPI NH` = "Native Hawaiian or Pacific Islander, Non-Hispanic", `MR NH` = "Multiracial (two or more of above races), Non-Hispanic", `Hispanic` = "Hispanic (any race)" )) 

#rename race column to match 
DS3 <- rename(DS3, race_eth = race7)
```

### 2) Recategorize ages

```{r popages, include = FALSE}
DS3_clean <- DS3 %>% mutate(age_cat = recode(age_cat, "0-4" = "0-17", "5-11" = "0-17", "12-17" = "0-17")) 

```

### 3) Aggregate by Race/Ethnicity

```{r aggregate, include = FALSE,  message = FALSE}

#Aggregate by race for each county  
pop_aggregate <- DS3_clean %>%   
  group_by(county, race_eth) %>%    
  summarize(total_population = sum(pop)) %>%
  ungroup ()
```

## Milestone 4 - Join all Datasets and Add Rate Columns

```{r, warning = FALSE, message = FALSE}
#str(Counties_race)
#str(pop_aggregate)

#make sure data matches for all datasets
library(stringr)

Counties_race <- Counties_race %>%
  mutate(county = str_to_title(str_trim(county)),
         race_eth = str_to_title(str_trim(race_eth)))

pop_aggregate <- pop_aggregate %>%
  mutate(county = str_to_title(str_trim(county)),
         race_eth = str_to_title(str_trim(race_eth)))


#join County aggregated by race with population dataset
Counties_final <- Counties_race %>%
  inner_join (pop_aggregate, by = c("county", "race_eth")) %>%
  arrange(county) 

#Add rate (% population columns)
Counties_final <- Counties_final %>%
  mutate(
    total_infections_pct = round((total_infections / total_population) * 100,2),
    total_unrecovered_pct = round((total_unrecovered / total_population) * 100,2),
    total_severe_pct = round((total_severe / total_population) * 100,2)
  )

Counties_final <- Counties_final %>%
  mutate(across(everything(), ~replace(., is.nan(.), 0)))
  #mutate(race_eth = case_when(
   # race_eth == "American Indian Or Alaska Native, Non-Hispanic" ~ "American Indian or Alaska Native",
    #TRUE ~ race_eth
#  ))

str (Counties_final)

```

## Visualizations

### Graph of Infections by Race

```{r visualizations, message = FALSE, echo = TRUE}

CA_agg_by_race_only <- Counties_final %>%
  group_by(race_eth) %>%
  summarize (total_infections = sum(total_infections),
             total_unrecovered = sum (total_unrecovered),
             total_severe = sum (total_severe),
             total_population = sum(total_population))

CA_race <- CA_agg_by_race_only %>% 
  mutate(
    total_infections_pct = round((total_infections / total_population) * 100,2),
    total_unrecovered_pct = round((total_unrecovered / total_population) * 100,2),
    total_severe_pct = round((total_severe / total_population) * 100,2)
  )

#Pivot data for side by side bar graph
data_long_pct <- CA_race %>%
  pivot_longer(cols = c(total_infections_pct, total_unrecovered_pct, total_severe_pct),
               names_to = "metric", values_to = "value")

#Bar Graph
Graph_2 <- ggplot(data_long_pct, aes(x = race_eth, y = value, fill = metric)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(
    title = "Novel Respiratory Disease Infections by Race/Ethnicity",
    x = "Race Category",
    y = "Percent of Total Population",
    fill = "Infection Category",  # Renaming the legend title
    caption = "Interpretation: Data represents percentages of infection categories calculated based on total population
    \n per race/ethnicity. The graph shows the Race Categories most affected are Alaska Native, White, 
    \n Black and Hispanic with Asian and Multiracial least affected. The percentage of severe and unaffected
    \n cases follow the same pattern." # Adding a footnote
  ) +
  scale_fill_manual(
    values = c("total_infections_pct" = "skyblue", 
               "total_unrecovered_pct" = "orange", 
               "total_severe_pct" = "red"),
    labels = c("Total Infections", "Total Unrecovered", "Total Severe")  # Renaming the legend categories
  ) +
  scale_x_discrete(labels = function(x) ifelse(nchar(x) > 19, paste(substr(x, 1, 19), "\n", substr(x, 20, nchar(x))), x)) +  
  # Add line break for long labels
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
    axis.text.y = element_text(size = 10),
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank(),
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    plot.caption = element_text(hjust = 0, size = 10)  # Left-align the footnote
  )

Graph_2

```


###Graph of top ten most affected counties

```{r visualizations, message = FALSE, echo = TRUE}

Counties_county <- Counties_final %>%
  mutate(
    total_infections_pct = round((total_infections / total_population) * 100,2),
    total_unrecovered_pct = round((total_unrecovered / total_population) * 100,2),
    total_severe_pct = round((total_severe / total_population) * 100,2)
  )

# Summary data

counties_county_only <- Counties_county %>%
  group_by(county) %>%
  summarize(
    total_infections = sum(total_infections),
    total_unrecovered = sum(total_unrecovered),
    total_severe = sum(total_severe),
    total_population = sum(total_population)
  )

#Percentage of cases and of top 10 counties


CA_county_only <- counties_county_only %>% 
  mutate(
    total_infections_pct = round((total_infections / total_population) * 100, 2),
    total_unrecovered_pct = round((total_unrecovered / total_population) * 100, 2),
    total_severe_pct = round((total_severe / total_population) * 100, 2)
  ) %>% 
  group_by(county) %>% # Ensure that summarization is done by groups if `county` exists.
  summarize(
    Total_Unrecovered = sum(total_unrecovered, na.rm = TRUE),
    Total_Severe = sum(total_severe, na.rm = TRUE),
    Total_Infections = sum(total_infections, na.rm = TRUE)
  ) %>%
  arrange(desc(Total_Infections), desc(Total_Unrecovered), desc(Total_Severe))%>%
  slice_head(n=10)


# Pivot the data for plotting

top_10_counties_pct <- CA_county_only %>%
  pivot_longer(
    cols = c(Total_Infections, Total_Unrecovered, Total_Severe),
    names_to = "metric", values_to = "value"
  )

# Create the bar plot

ggplot(top_10_counties_pct, aes(x = reorder(county, -value), y = value, fill = metric)) +
  geom_bar(stat = "identity", position = "dodge") +  # Create side-by-side bars
  labs(
    title = "Top Ten Counties Affected",
    x = "County",                   # Corrected to match the axis
    y = "Percent of Total Population",
    fill = "Category",           # Legend title for infection categories
    caption = "Interpretation: 
    Graph shows top ten most affected counties with Los Angeles
    having the highest percentage of infected people, 
    severe and unrecovered cases."  # Added caption
  ) +
  scale_fill_manual(
    values = c(
      Total_Infections = "#DAA520", 
      Total_Unrecovered = "#FA8072", 
      Total_Severe = "red"
    ),
    labels = c("Total Infections", "Total Unrecovered", "Total Severe")  # Renaming the legend categories
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 10),  # Rotate x-axis labels
    axis.text.y = element_text(size = 10),  # Adjust y-axis labels
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    axis.title = element_text(size = 12),
    plot.caption = element_text(size = 10, hjust = 0)  # Style the caption
  )
```

### Percent Infection and Infection Type by Race

```{r, message = FALSE, warning = FALSE, echo = TRUE}
#percentage stats

CA_race_table <- CA_race %>% mutate(percent_infected = (total_infections/total_population)*100, percent_severe_of_infected = (total_severe/total_infections) * 100, percent_unrecovered_of_infected = (total_unrecovered/total_infections)*100)

#cleaning dataframe

CA_race_table <- select(CA_race_table, -total_infections, -total_unrecovered, -total_severe, -total_population, -total_infections_pct, -total_unrecovered_pct, -total_severe_pct)

#percent infection table by race

race_kable <- kable(
  CA_race_table,
  col.names = c('Race/Ethnicity', 'Percent Infected', 'Percentage of Severe Cases among Infected', 'Percentage of Unrecovered Cases among Infected'),
  digits = 1,
  align = c('l', 'c', 'c', 'c'),
  caption = "Novel Respiratory Disease Infection Percentages by Race/Ethnicity"
) %>%
  kable_styling(full_width = FALSE, position = "center") %>%
  footnote(
    general_title = "<b>Interpretation:</b>",
    general = "The group with the highest percent of infection is American Indian or Alaska Native. However, the group with the highest percentage of severe cases and unrecovered cases is White. The Multiracial group has the lowest percentage of infection, severe infections, and unrecovered infections.",
    escape = FALSE
  ) 

race_kable

```

## Data Element Statistics

```{r, echo = FALSE}
# Create statistics for data elements 
# Count unique counties
County_stats <- n_distinct(Counties_race$county) 

# Count unique race/ethnicity categories and list unique categories
Race_stats <- n_distinct(Counties_race$race_eth) 
Race_cat <- unique(Counties_race$race_eth)

# Infection statistics 
infection_stats <- Counties_race %>%   summarise(     Mean_Total_Infections = mean(total_infections, na.rm = TRUE),     Max_Total_Infections = max(total_infections, na.rm = TRUE),     Min_Total_Infections = min(total_infections, na.rm = TRUE)   ) %>% as.list()  

# Unrecovered statistics 
unrecovered_stats <- Counties_race %>%   summarise(     Mean_Total_Unrecovered = mean(total_unrecovered, na.rm = TRUE),     Max_Total_Unrecovered = max(total_unrecovered, na.rm = TRUE),     Min_Total_Unrecovered = min(total_unrecovered, na.rm = TRUE)   ) %>% as.list() 

# Severe statistics 
severe_stats <- Counties_race %>%   
  summarise (Mean_Total_Severe = mean(total_severe, na.rm = TRUE),     
Max_Total_Severe = max(total_severe, na.rm = TRUE),    
Min_Total_Severe = min(total_severe, na.rm = TRUE)   ) %>% 
  as.list() 

str(pop_aggregate)
# Population statistics 
pop_stats <- pop_aggregate %>% ungroup() %>%  summarise(Mean_Population = mean(pop_aggregate$total_population, na.rm = TRUE),     
Max_Population = max(pop_aggregate$total_population, na.rm = TRUE),     Min_Population = min(pop_aggregate$total_population, na.rm = TRUE)   )   

#Create statistics table manually 
Element_stats <- data.frame(   
  Variable_Name = c("county", "race/ethnicity", "total infections", "total unrecovered", "total severe", "population"),   Statistics = c("58 counties","7 categories", "Range = 0 to 429,165;  Mean = 11,206",                  "Range = 0 to 43,063;  Mean = 1,384","Range = 0 to 9,482;  Mean = 313", "Range = 0 to 4,089,110;  Mean = 96,328"                ) )  

Element_stats %>%   kable("html", col.names = c("Variable Name", "Statistics")) %>%   
  kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover", "condensed", "responsive"))  %>% 
  add_header_above(c("Summary Statistics" = 2))
```
